summary(magLo)
# bsplines
# escolha dos nós
df3 <- lm(y ~ bs(x2, df = 3))
AIC(df3)
df4 <- lm(y ~ bs(x2, df = 4))
AIC(df4)
df5 <- lm(y ~ bs(x2, df = 5))
AIC(df5)
# melhor: 4 nós
magSpli = gam(y ~ x1 + s(x2,4))
summary(magSpli)
# comparação de modelos
AIC(modelo1)
AIC(modelo2)
AIC(magLo)
AIC(magSpli)
shapiro.test(modelo2$residuals)
# variancia constante
plot(modelo2$residuals, modelo2$fitted.values)
# independencia
plot(1:100,modelo2$residuals)
# Graficos de ajuste
# predicao x y
plot(magLo$fitted.values, y)
# predicao x x2
plot(magLo$fitted.values, x2)
# Graficos de ajuste
# predicao x y
plot(modelo2$fitted.values, y)
# predicao x x2
plot(modelo2$fitted.values, x2)
# comparação de modelos
AIC(modelo1)
AIC(modelo2)
AIC(magLo)
AIC(magSpli)
cbind(lambdas,SQRes)
# Obtenção dos dados
set.seed(2019431054)
x = 1:100
x1 = x + rnorm(100,0, 5)
set.seed(2019431054)
x2 = sort(rexp(100, 0.01))
set.seed(2019431054)
y = 1:100 + rnorm(100, 0 ,10)
plot(x1, y)
plot(x2, y)
dados = data.frame('y'=y, 'x1'=x1, 'x2'=x2)
# estatisticas descritivas
summary(dados)
cor(dados)
# linear multipla
modelo1 = lm(y~x1+x2)
summary(modelo1)
# polinomial multipla
modelo2 = lm(y ~ x2 + sqrt(x2))
summary(modelo2)
# lowess
library(gam)
o=order(x2)
mdat1= matrix(c(x2[o],y[o]), ncol = 2)
SQRes=NULL
for(i in 4:8){
residuo=y[o]-lowess(mdat1, f = i/10, iter=0)$y
SQRes[i-3]=sum(residuo^2)
}
lambdas=c(.4,.5,.6,.7,.8)
cbind(lambdas,SQRes)
# lambda = 0.4
magLo = gam(y ~ x1 + lo(x2,span=0.4))
summary(magLo)
# bsplines
# escolha dos nós
df3 <- lm(y ~ bs(x2, df = 3))
AIC(df3)
df4 <- lm(y ~ bs(x2, df = 4))
AIC(df4)
df5 <- lm(y ~ bs(x2, df = 5))
AIC(df5)
# melhor: 4 nós
magSpli = gam(y ~ x1 + s(x2,4))
summary(magSpli)
# comparação de modelos
AIC(modelo1)
AIC(modelo2)
AIC(magLo)
AIC(magSpli)
# polinomial multipla
modelo2 = lm(y ~ x2 + sqrt(x2))
summary(modelo2)
AIC(modelo2)
# variancia constante
plot(modelo2$residuals, modelo2$fitted.values)
# Obtenção dos dados
set.seed(1001)
x = 1:100
x1 = x + rnorm(100,0, 5)
x2 = sort(rexp(100, 0.01))
y = 1:100 + rnorm(100, 0 ,10)
x = summary(modelo2)
myExp = function(n,lambda){
x = runif(n,0,1)
return(-log(x)/lambda)
}
lambda=4
e = myExp(50000, lambda)
sum(e<0.55)/50000
e<0.55
e[e<0.55]
length(e[e<0.55])/50000
sum(e<0.55)/50000
x = c(20, 50, 100, 150, 200, 300, 500)
y = c(4, 5, 8, 9, 11, 12, 15)
plot(x,y)
corr(x,y)
cor(x,y)
x*y
xy = sum(x*y)
xybarra = 7*mean(x)*mean(y)
den = 7*sd(x)*sd(y)
(xy-xybarra)/den
den = sd(x)*sd(y)
(xy-xybarra)/den
((x-mean(x)) * (y-mean(y))) / (sd(x)*sd(y))
sum((x-mean(x)) * (y-mean(y))) / (sd(x)*sd(y))
x-mean(x)
y-mean(y)
(x-mean(x)) * (y-mean(y))
sum((x-mean(x)) * (y-mean(y)))
3711.429/(sd(x)*sd(y))
cov(x,y)/(sd(x)*sd(y))
sum((x-mean(x)) * (y-mean(y)))/6
618.5714/(sd(x)*sd(y))
x2 = x^2
(7*sum(x*y) - sum(x)*sum(y)) / (sqrt(7*sum(x2)-sum(x)^2)* sqrt(7*sum(y2)-sum(y)^2))
y2 = y^2
(7*sum(x*y) - sum(x)*sum(y)) / (sqrt(7*sum(x2)-sum(x)^2)* sqrt(7*sum(y2)-sum(y)^2))
sum(x*y)
sum(x)
sum(y)
sum(x)*sum(y)
sum(x2)
sum(y2)
sum(x)^2
sum(x)
sum(y)^2
cor(x,y)
sd(y)
sd(x)
lm(y~x)
cor(x,y)* sd(y)/sd(x)
mod = lm(y~x)
plot(mod)
plot(mod)
plot(x,y)
abline(4.93908,0.02229)
mod
mod$rank
mod$effects
mod$terms
cor(x,y)
cor(x,y)^2
x = c(2,3,5,8,12,15,18)
y = c(4,8,3,2,2,5,4)
plot(x,y)
sum(x*y)
sum(x)*sum(y)
x2 = x^2
y2 = y^2
sum(x2)
sum(y2)
sum(x)^2
sum(y)^2
cor(x,y)
sd(x)
sd(y)
lm(y ~ x)
4.71053-0.07895*6
cor(x,y)^2
cor(x,y)
x = c(2.6,3.4,3.6,3.2,3.5,2.9)
y = c(2800,3100,3500,3000,3400,3100)
plot(x,y)
sum(x*y)
sum(x)*sum(y)
x2 = x^2
y2 = y^2
sum(x2)
sum(y2)
sum(x)^2
sum(y)^2
cor(x,y)
mod = lm(y~x)
mod
sd(y)
sd(x)
1290.5+581.1*3.3
cor(x,y)^2
x = c(400,450,550,600,700,750)
y = c(4000,5000,5400,5900,6400,7000)
plot(x,y)
x2 = x^2
y2 = y^2
sum(x*y)
sum(x)*sum(y)
sum(x2)
sum(y2)
sum(x)^2
sum(y)^2
cor(x,y)
sd(y)
sd(x)
mod = lm(y~x)
mod
mean(x)
mean(y)
5616.667-7.6*575
7.6*500
1246.67+ 7.6*500
0.9791^2
pnorm(q = 24, mean = 18, sd=4)
1-pnorm(q = 24, mean = 18, sd=4)
qnorm(p=0.9)
12 + (qnorm(p=0.9)*(5/sqrt(18)))
12 - (qnorm(p=0.9)*(5/sqrt(18)))
320/400
qnorm(0.99)
erro = 0.8*0.2/400
margem de erro = 2.3263 * erro
moe = 2.3263 * erro
moe
erro
erro = sqrt(0.8*0.2/400)
moe = 2.3263 * erro
erro
moe
0.8 + (qnorm(0.99) * sqrt(0.8*0.2/400)
0.8 + (qnorm(0.99) * sqrt(0.8*0.2/400))
0.8 + (qnorm(0.99) * sqrt(0.8*0.2/400))
0.8 - (qnorm(0.99) * sqrt(0.8*0.2/400))
x = c(12,1.3,2.5,18.6,9,3.8)
y = c(7.2,0,2.1,11.9,5.3,1.2)
cor(x,y)
y = c(12,1.3,2.5,18.6,9,3.8)
x = c(7.2,0,2.1,11.9,5.3,1.2)
cor(x,y)
lm(y ~ x)
pnorm(q = 200, mean = 200, sd=20)
pnorm(q = 200, mean = 200, sd=20)- pnorm(q = 160, mean = 200, sd=20)
pnorm(q = -2) - pnorm(q = 0)
pnorm(q = 0) - pnorm(q = -2)
8*0.267
?pbinom
pbinom(2.136,8,prob = 0.5)
pbinom(size=8,prob=0.267)
pbinom(2.136,size=8,prob=0.267)
pbinom(8,prob=0.267)
pbinom(q=0,size=8,prob=0.267)
1-pbinom(q=0,size=8,prob=0.267)
x = c(26,22,21,21,26,29,28,22,20,16)
mean(x)
sd(x)
23.1+4.04
x = c(20,23,31,36,36,38,38,39,40,40,40,41,41,41,42,43,43,45,45,46,47,48)
mean(x)
pnorm(38,mean = mean(x),sd = sd(x))
pnorm(38,mean = mean(x),sd = sd(x), lower.tail = F)
x > 38
sum(x > 38)
15/22
qnorm(0.2, 5.7,1.3)
qnorm(0.2, 5.7,1.3, lower.tail = F)
0.26*6497472
0.26*6497472 / 0.36
3099-1120
713+91
1979-804
285+1175
3099-278-1460
1361-713
278-91
648/3099
648/1361 * 648/1120
1120/1361
x = c(16,16,20,22,15,19,13,9)
y = c(18,16,17,18,16,15,11,3)
lm(y ~ x)
?lm
b0 = -2.408
b1 = 1.025
y = -2.408 + 1.025x
b0 é a temperatura real media quando a prevista for 0
b1 demonstra o aumento na temperatura real media quando se aumenta a temperatura prevista em 1 unidade
x = c(3,12,10,8,1)
mode(x)
median(x)
y = c(1,2,3,4,5)
rep(y,x)
t = rep(y,x)
median(t)
1300-900
pnorm(-2)
6-11
-5/3
pnorm(-5/3)
y = 15500 - 4.50*4
y
(14+10+21+20+15) / 5
((14-16)^2 + (10-16)^2 + (21-16)^2 + (20-16)^2 + (15-16)^2) / 5
14+10+21+,0,15
var(c(14,10,21,20,15))
((14-16)^2 + (10-16)^2 + (21-16)^2 + (20-16)^2 + (15-16)^2)
82/5
82/4
(25+12+25+28+39)/5
((25-25.8)^2 + (12-25.8)^2 + (25-25.8)^2 + (28-25.8)^2 + (39-25.8)^2) / 5
x = c(8.6,8.5,7.9,7.9,8.1,7.6,7.7,7.5,7.6,6.8,8.2,8.5,9,8.9)
median(x)
mean(x)
sort(x)
length(x)
sd(k)
k = c(33,33,33,34)
l = c(32,39,33,34)
m = c(35,35,36,34)
n = c(24,37,40,35)
p = c(36,16,26,41)
sd(k)
sd(l)
sd(m)
sd(n)
sd(p)
median(c(k,l,m,n,p))
lapply(c(k,l,m,n,p), median)
sapply(c(k,l,m,n,p), median)
sapply(c(k,l,m,n,p), median, simplify = TRUE)
sapply(list(c(k,l,m,n,p)), median, simplify = TRUE)
median(k)
median(l)
median(m)
median(n)
median(p)
marca*4
marca = c('A','B','C')
milhagem = c(32.4,28.8,36.5,34.4,35.6,28.6,37.6,xx,38.7,29.9,39.1,37.9)
marca*4
rep(marca,4)
?rep
rep(marca,times=4)
rep(marca,each=4)
marca = rep(c('A','B','C'), each=4)
marca
?data.frame
milhagem = c(32.4,28.8,36.5,34.4,35.6,28.6,37.6,67,38.7,29.9,39.1,37.9)
df = data.frame(marca, milhagem)
df
modelo = rep(c('M_A', 'M_B', 'M_C', 'M_D'))
MODELO
modelo
modelo = rep(c('M_A', 'M_B', 'M_C', 'M_D'),3)
modelo
df = data.frame(modelo,marca, milhagem)
df
str(df)
anovaPedrinho <- aov(milhagem ~ marca + modelo, data=df)
summary(anovaPedrinho)
anova1 <- aov(milhagem ~ marca, data=df)
summary(anova1)
df
aggregate(df$milhagem, df$marca, mean)
aggregate(df$milhagem, list(df$marca), mean)
medias = aggregate(df$milhagem, list(df$marca), mean)
medias
medias[1,2]
df[which(df$marca == 'A')]
df[which(df$marca == 'A'),]
df[which(df$marca == 'A'),3]
t.test(df[which(df$marca == 'A'),3], df[which(df$marca == 'B'),3])
t.test(df[which(df$marca == 'A'),3], df[which(df$marca == 'C'),3])
t.test(df[which(df$marca == 'C'),3], df[which(df$marca == 'B'),3])
t.test(df[which(df$marca == 'A'),3], df[which(df$marca == 'B'),3], var.equal = F)
t.test(df[which(df$marca == 'A'),3], df[which(df$marca == 'C'),3], var.equal = F)
t.test(df[which(df$marca == 'C'),3], df[which(df$marca == 'B'),3], var.equal = F)
t.test(df[which(df$marca == 'A'),3], df[which(df$marca == 'B'),3], var.equal = T)
t.test(df[which(df$marca == 'A'),3], df[which(df$marca == 'C'),3], var.equal = T)
t.test(df[which(df$marca == 'C'),3], df[which(df$marca == 'B'),3], var.equal = T)
medias = aggregate(df$milhagem, list(df$marca), mean)
medias
anova1
summary(anova1)
df
summary(anova1)
boxplot(df$milhagem ~ df$marca)
anova1
model.tables(anova1, 'means', se=TRUE)
ajuste = lm(df$milhagem~df$marca)
anova(ajuste)
pairwise.t.test(df$milhagem, df$marca, p.adj='bonf')
t1 = c(99,97,94,93)
t2 = c(97,96,95,94)
t3 = C(97,92,67,90)
t4 = c(96,98,92,92)
t_total = c(t1,t2,t3,t4)
aparelhos = rep(c('t1,t2,t3,t4'), each=4)
df = data.frame(aparelhos, t_total)
t_total = c(t1,t2,t3,t4)
t3 = C(97,92,67,90)
t3 = c(97,92,67,90)
t_total = c(t1,t2,t3,t4)
aparelhos = rep(c('t1,t2,t3,t4'), each=4)
df = data.frame(aparelhos, t_total)
df
aparelhos = rep(c('t1','t2','t3','t4'), each=4)
df = data.frame(aparelhos, t_total)
df
anova(df$aparelhos ~ df$t_total)
anova = aov(df$aparelhos ~ df$t_total)
anova2 = aov(df$aparelhos ~ df$t_total)
clear
t1 = c(99,97,94,93)
t2 = c(97,96,95,94)
t3 = c(97,92,67,90)
t4 = c(96,98,92,92)
t_total = c(t1,t2,t3,t4)
aparelhos = rep(c('t1','t2','t3','t4'), each=4)
df = data.frame(aparelhos, t_total)
anova2 = aov(df$aparelhos ~ df$t_total)
summary(anova2)
summary(anova2)
ttotal = c(t1,t2,t3,t4)
ttotal = c(t1,t2,t3,t4)
aparelhos = rep(c('t1','t2','t3','t4'), each=4)
df = data.frame(aparelhos, ttotal)
anova2 = aov(df$aparelhos ~ df$t_total)
anova2 = aov(df$aparelhos ~ df$ttotal)
string(df)
df
levels(df$aparelhos)
anova2 = aov(df$aparelhos ~ df$ttotal, data=df)
summary(anova2)
anova2 = aov(df$ttotal ~ df$aparelhos, data=df)
summary(anova2)
TukeyHSD(anova2, "aparelhos", ordered=T)
aparelhos
TukeyHSD(anova2, df$aparelhos, ordered=T)
TukeyHSD(anova2, aparelhos, ordered=T)
aparelhos = factor(rep(c('t1','t2','t3','t4'), each=4))
aparelhos
TukeyHSD(anova2, "aparelhos", ordered=T)
TukeyHSD(anova2, aparelhos, ordered=T)
TukeyHSD(anova2, df$aparelhos, ordered=T)
aparelhos = factor(rep(c('t1','t2','t3','t4'), each=4))
anova2 = aov(df$ttotal ~ df$aparelhos, data=df)
df = data.frame(aparelhos, ttotal)
anova2 = aov(df$ttotal ~ df$aparelhos, data=df)
summary(anova2)
TukeyHSD(anova2, df$aparelhos, ordered=T)
aparelhos = rep(c('t1','t2','t3','t4'), each=4)
df = data.frame(aparelhos, ttotal)
anova2 = aov(df$ttotal ~ df$aparelhos, data=df)
summary(anova2)
TukeyHSD(anova2, df$aparelhos, ordered=T)
TukeyHSD(anova2, df$ttotal, ordered=T)
TukeyHSD(anova2, aparelhos, ordered=T)
?TukeyHSD
TukeyHSD(anova2, ordered=T)
# verificando se o pacote devtools está instalado
if(!require(remotes)){
install.packages("remotes")
}
# instalando o pacote planex:
remotes::install_github("fndemarqui/planex", force = TRUE)
library(planex)
library(mvtnorm)
?dmvnorm
x <- rmvnorm(n=500, mean=c(1,2), sigma=sigma, method="chol")
sigma <- matrix(c(4,2,2,3), ncol=2)
x <- rmvnorm(n=500, mean=c(1,2), sigma=sigma, method="chol")
x
sigma
120/8
?is.na
x <- c(12L, 6L, 10L,8L,15L,14L)
median(x)
typeof(median(x))
x <- NA
y = x/1
y
mylist <- list(1,2,'c',4,5)
unlist(mylist)
?merge
x = as.Date("2018-10-01")
month(x)
as.month(x)
months(x)
?rownames
?names
?colnames
v = 1:3
names(v) = c(1,2,3)
v[4] = -4
names(v)
x = c(2,4,3,5)
x[c(-1,0,0,0)]
x[c(-1,2,3,4)]
setwd("E:\\Google Drive\\UFMG\\2021.1\\Teoria da Decisao\\TC)
setwd("E:\\Google Drive\\UFMG\\2021.1\\Teoria da Decisao\\TC")
load(evol)
list.files()
load("evol")
evol_gvns
